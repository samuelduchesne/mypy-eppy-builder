{# idf.pyi.jinja2 #}
from typing import overload, Literal, Iterable

from {{ package.epbunch_path }} import EpBunch

{% for classname in classnames %}
from {{ package.data.pypi_stubs_name }}.{{ classname }} import {{ classname }}
{% endfor %}

class IDF:
{% for classname, ep_key in overloads %}
    @overload
    def newidfobject(self, key: Literal["{{ ep_key }}"], **kwargs) -> {{ classname }}: ...
    @overload
    def idfobjects(self, key: Literal["{{ ep_key }}"]) -> list[{{ classname }}]: ...
    @overload
    def popidfobject(self, key: Literal["{{ ep_key }}"], index: int) -> {{ classname }}: ...
    @overload
    def getobject(self, key: Literal["{{ ep_key }}"], name: str) -> {{ classname }}: ...
    @overload
    def removeextensibles(self, key: Literal["{{ ep_key }}"], name: str) -> {{ classname }}: ...
{% endfor %}

    def newidfobject(self, key: str, **kwargs) -> EpBunch: ...
    def idfobjects(self, key: str) -> list[EpBunch]: ...
    def popidfobject(self, key: str, index: int) -> EpBunch: ...
    def getobject(self, key: str, name: str) -> EpBunch: ...
    def copyidfobject(self, idfobject: EpBunch) -> EpBunch: ...
    def removeextensibles(self, key: str, name: str) -> EpBunch: ...
    def addidfobject(self, new_object: EpBunch) -> EpBunch: ...
    def removeidfobjects(self, idfobjects: Iterable[EpBunch]) -> list[EpBunch]: ...
    def anidfobject(self, key: str, aname: str = "", **kwargs) -> EpBunch: ...
    def rename(self, objkey: str, objname: str, newname: str) -> EpBunch: ...
