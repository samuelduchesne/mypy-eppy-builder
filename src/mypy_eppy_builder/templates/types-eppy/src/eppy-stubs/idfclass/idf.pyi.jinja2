{# idf.pyi.jinja2 #}
from typing import overload, Literal

from {{ package.epbunch_path }} import EpBunch

{% for classname in classnames %}
from {{ package.data.pypi_stubs_name }}.{{ classname }} import {{ classname }}
{% endfor %}

class IDF:
{% if version_classname %}
    @overload
    def __init__(self: {{ version_classname }}, *, as_version: Literal["{{ eplus_version }}"], **kwargs) -> None: ...
    @overload
    def __init__(self: {{ version_classname }}, *, file_version: Literal["{{ eplus_version }}"], **kwargs) -> None: ...
{% endif %}
    def __init__(self, *args, **kwargs) -> None: ...
{% for classname, ep_key in overloads %}
    @overload
    def newidfobject(self, key: Literal["{{ ep_key }}"], **kwargs) -> {{ classname }}: ...
    @overload
    def idfobjects(self, key: Literal["{{ ep_key }}"]) -> list[{{ classname }}]: ...
    @overload
    def popidfobject(self, key: Literal["{{ ep_key }}"], index: int) -> {{ classname }}: ...
    @overload
    def getobject(self, key: Literal["{{ ep_key }}"], name: str) -> {{ classname }}: ...
    @overload
    def removeextensibles(self, key: Literal["{{ ep_key }}"], name: str) -> {{ classname }}: ...
{% endfor %}

    def newidfobject(self, key: str, **kwargs) -> EpBunch: ...
    def idfobjects(self, key: str) -> list[EpBunch]: ...
    def popidfobject(self, key: str, index: int) -> EpBunch: ...
    def getobject(self, key: str, name: str) -> EpBunch: ...
    def copyidfobject(self, idfobject: EpBunch) -> EpBunch: ...
    def removeextensibles(self, key: str, name: str) -> EpBunch: ...

{% if version_classname %}
class {{ version_classname }}(IDF):
    pass
{% endif %}

